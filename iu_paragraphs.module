<?php

/**
 * @file
 * Contains iu_paragraphs.module.
 */

use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function iu_paragraphs_theme($existing, $type, $theme, $path) {
  return [
    'field__iu_feature_link' => [
      'base hook' => 'field',
    ],
    'field__iu_feature_subhead' => [
      'base hook' => 'field',
    ],
    'field__iu_image_caption_title' => [
      'base hook' => 'field',
    ],
    'field__iu_panel_content' => [
      'base hook' => 'field',
    ],
    'field__iu_panel_header' => [
      'base hook' => 'field',
    ],
    'field__iu_section_title' => [
      'base hook' => 'field',
    ],
    'field__iu_stat_content' => [
      'base hook' => 'field',
    ],
    'field__iu_stat_link' => [
      'base hook' => 'field',
    ],
    'field__iu_stat_number' => [
      'base hook' => 'field',
    ],
    'paragraph__iu_accordion' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__iu_callout_pullquote' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__iu_carousel' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__iu_cta' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__iu_tabs' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__iu_feature' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__iu_feature_carousel' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__iu_grid_builder' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__iu_grid_item' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__iu_image' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__iu_panel' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__iu_panel_interactive' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__iu_section' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__iu_stat' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__iu_stats' => [
      'base hook' => 'paragraph',
    ],
  ];
}

/**
 * Prepares variables for `field--iu-feature-link.html.twig`.
 */
function iu_paragraphs_preprocess_field__iu_feature_link(&$variables) {
  // Add the 'button' class to Feature link.  In Drupal 8, we try to avoid
  // adding classes in preprocess, however there is currently not a clean way
  // to do this in the Twig template.
  if (!empty($variables['items'][0])) {
    $variables['items'][0]['content']['#options']['attributes']['class'][] = 'button';
  }
}

/**
 * Prepares variables for `field--iu-stat-link.html.twig`.
 */
function iu_paragraphs_preprocess_field__iu_stat_link(&$variables) {
  // Add the 'button' class to Stat link.  In Drupal 8, we try to avoid adding
  // classes in preprocess, however there is currently not a clean way to do
  // this in the Twig template.
  if (!empty($variables['items'][0])) {
    $variables['items'][0]['content']['#options']['attributes']['class'][] = 'button';
  }
}

/**
 * Prepares variables for `paragraph--iu-callout-pullquote.html.twig`.
 */
function iu_paragraphs_preprocess_paragraph__iu_callout_pullquote(&$variables) {
  $p = $variables['paragraph'];

  // The value of the is_pullquote boolean variable is based on whether the
  // user specified any text in the "Attribution" field. If attribution is
  // left empty, then this is not a pullquote.
  $attribution = $p->iu_quote_attribution->getValue();
  $variables['is_pullquote'] = !empty($attribution[0]['value']);

  // Setup has_image boolean variable.
  $image = $p->iu_callout_image->entity;
  $variables['has_image'] = !empty($image);
}

/**
 * Prepares variables for `paragraph--iu-feature.html.twig`.
 */
function iu_paragraphs_preprocess_paragraph__iu_feature(&$variables) {
  $p = $variables['paragraph'];

  // Setup has_image boolean variable.
  $image = $p->iu_feature_image->entity;
  $variables['has_image'] = !empty($image);
}

/**
 * Prepares variables for `paragraph--iu-panel.html.twig`.
 */
function iu_paragraphs_preprocess_paragraph__iu_panel(&$variables) {
  $p = $variables['paragraph'];

  // Default to H3 if header level field value is undefined.
  $header_level = $p->iu_panel_header_level->getValue();
  $header_level = !empty($header_level[0]['value']) ? $header_level[0]['value'] : 'h3';
  $variables['header_level'] = $header_level;
}

/**
 * Prepares variables for `paragraph--iu-panel-interactive.html.twig`.
 */
function iu_paragraphs_preprocess_paragraph__iu_panel_interactive(&$variables) {
  $p = $variables['paragraph'];

  // Prep the header_level logic from iu_panel preprocess.
  iu_paragraphs_preprocess_paragraph__iu_panel($variables);

  // Prep the interactive link_uri variable.
  $link_uri = $p->iu_panel_interactive_link->getValue();
  $link_uri = !empty($link_uri[0]['uri']) ? $link_uri[0]['uri'] : '';
  $variables['link_url'] = Url::fromUri($link_uri)->toString();
}

/**
 * Prepares variables for `paragraph--iu-section.html.twig`.
 */
function iu_paragraphs_preprocess_paragraph__iu_section(&$variables) {
  $p = $variables['paragraph'];

  // Setup background image variable.
  $bgimage = $p->iu_section_bgimage->entity;
  $variables['bgimage'] = !empty($bgimage) ? file_url_transform_relative(file_create_url($bgimage->getFileUri())) : FALSE;

  // Setup background color class name variable.
  $bgcolor = $p->iu_section_background_color->getValue();
  $colorname = !empty($bgcolor[0]['value']) ? $bgcolor[0]['value'] : 'none';
  $variables['bgcolor'] = 'bg-' . $colorname;

  if (drupal_get_path('theme', 'iu')) {
    // Load IU color palette and display section background color options as
    // color blocks. (Please excuse the tight coupling with the IU theme, it
    // couldn't be helped to satisfy the IU Styleguide options).
    require_once drupal_get_path('theme', 'iu') . '/iu.theme';
    $colors = _iu_secondary_color_palette_options();

    // Determine the real colorname of the secondary color based on the IU
    // Theme settings to help us determine whether to add the bg-dark class
    // below.
    if ($colorname == 'secondary') {
      $colorname = theme_get_setting('secondary_color', 'iu');
      if (empty($colorname)) {
        $colorname = 'none';
      }
    }

    // Add bg-dark class for certain colors.
    if (!empty($colors[$colorname]) && $colors[$colorname]['is_dark'] == TRUE) {
      $variables['bgcolor'] .= ' bg-dark';
    }
  }

  // Setup parallax variable.
  $parallax = $p->iu_section_bgparallax->getValue();
  $variables['parallax'] = !empty($parallax[0]['value']);

  // Setup horizontal rule variable for template usage.
  $hr = $p->iu_section_horizontal_rule->getValue();
  $variables['hr'] = !empty($hr[0]['value']);

  // Setup height variable for template usage.
  $height = $p->iu_section_height->getValue();
  $variables['height'] = !empty($height[0]['value']) ? $height[0]['value'] : 'standard';

  // Setup width variable for template usage.
  $width = $p->iu_section_width->getValue();
  $variables['width'] = !empty($width[0]['value']) ? $width[0]['value'] : 'standard';

  // Setup additional formatting classes variable.
  $styles = [];
  foreach ($p->iu_section_styles->getValue() as $style) {
    $styles[] = $style['value'];
  }
  $variables['styles'] = implode(' ', $styles);
}

/**
 * Implements hook_field_widget_form_alter().
 */
function iu_paragraphs_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {

  // Improve dropdown default option of '- None -'.
  $field_definition = $context['items']->getFieldDefinition();
  if ($field_definition->getName() == 'iu_section_width') {
    $element['#options']['_none'] = t('Standard width');
  }
  if ($field_definition->getName() == 'iu_section_height') {
    $element['#options']['_none'] = t('Standard height');
  }
}

/**
 * Implements hook_field_widget_info_alter().
 */
function iu_paragraphs_field_widget_info_alter(array &$info) {

  // Allow simple Drupal text fields to use the textarea widget,
  // for multi-line content entry.
  // (See https://www.drupal.org/project/textarea_widget_for_text)
  $info['text_textarea']['field_types'][] = 'text';
}

/**
 * Implements hook_form_paragraphs_subform_TYPE_alter() for Panels chunks.
 */
function iu_paragraphs_form_paragraphs_subform_iu_panel_alter(array &$subform, FormStateInterface $form_state, $delta) {
  $paragraph = $form_state->get('paragraph');

  // Remove the "- None -" option from the header level dropdown. Why Drupal
  // doesn't let you do this through configuration is beyond me.
  if ($subform['iu_panel_header_level']['widget']['#default_value'] != '_none' && !empty($subform['iu_panel_header_level']['widget']['#options']['_none'])) {
    unset($subform['iu_panel_header_level']['widget']['#options']['_none']);
  }
}

/**
 * Implements hook_form_paragraphs_subform_TYPE_alter() for Sections.
 */
function iu_paragraphs_form_paragraphs_subform_iu_section_alter(array &$subform, FormStateInterface $form_state, $delta) {
  $paragraph = $form_state->get('paragraph');

  $secondary_color = theme_get_setting('secondary_color', 'iu');
  if (empty($secondary_color)) {
    $secondary_color = 'none';
  }

  // Handle missing theme.
  if (!drupal_get_path('theme', 'iu')) {
    return;
  }

  // Load IU color palette and display section background color options as
  // color blocks. (Please excuse the tight coupling with the IU theme, it
  // couldn't be helped to satisfy the IU Styleguide options).
  require_once drupal_get_path('theme', 'iu') . '/iu.theme';
  $colors = _iu_secondary_color_palette_options();

  $widget = &$subform['iu_section_background_color']['widget'];
  $widget['#attributes']['class'][] = 'color-block-radios';
  foreach ($widget['#options'] as $key => $markup) {
    $class = $key;
    $name = $markup->__toString();
    if (!empty($colors[$key])) {
      $class = $colors[$key]['class'];
      $name = $colors[$key]['name'];
      $details = t('Primary color');
    }
    elseif ($class == 'secondary') {
      $class = $colors[$secondary_color]['class'];
      $name = $colors[$secondary_color]['name'];
      $details = $markup->__toString();
    }
    elseif ($class == '_none') {
      $class = 'bg-white-default';
      $name = t('None');
      $details = t('Default (white)');
    }

    $color_block = '
<div class="color-block ' . $class . '">
  <div class="color-name">' . $name . '</div>
  <div class="color-details">' . $details . '</div>
</div>
';
    $widget['#options'][$key] = $color_block;
  }

  if ($widget['#default_value'] == NULL) {
    $widget['#default_value'] = '_none';
  }

  $subform['#attached']['library'][] = 'iu/color-block';
}
