{#
/**
 * @file
 * IU Paragraphs template for displaying an Accordion.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% set sections = content._field_layout.content.iu_accordion_section %}

{# The template default set classes. #}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  ]
%}

<div{{ attributes }}>
{{ title_suffix }}

<ul class="accordion" data-accordion role="tablist" aria-multiselectable="true">
  {# Loop through all of the accordion sections. #}
  {% for key, item in sections if key|first != '#' %}
  <li class="accordion-item">
    {% set section = item['#paragraph'] %}
    {% set section_id = key + 1 %}
    {% set panel_id = 'panel-' ~ paragraph.id.value ~ '-' ~ section_id %}

    <a href="#{{ panel_id }}" role="tab" class="accordion-title" id="{{ panel_id }}-heading" aria-controls="{{ panel_id }}">
      {# Print the accordion section title. #}
      {{ section.iu_accordion_section_title.value }}
    </a>
    <div id="{{ panel_id }}" class="accordion-content" role="tabpanel" data-tab-content aria-labelledby="{{ panel_id }}-heading">
      {# Loop through all of the accordion section bodies. #}
      {% for body_key, body_item in section.iu_accordion_section_body %}
        {# Use the same render array as item and set the '#paragraph'. #}
        {% set section_body = item %}
        {# Load the entity for the current translation #}
        {% set section_body = section_body|merge({'#paragraph': section_body['#paragraph'].iu_accordion_section_body[body_key].entity.getTranslation(section_body['#paragraph'].langcode[0].value)}) %}
        {# Remove the cache keys so it doesn't repeat the first value. #}
        {% set section_body = section_body|merge({'#cache': {}}) %}
        {# Print the compiled section body. #}
        {{ section_body }}
      {% endfor %}
    </div>
  </li>
  {% endfor %}
</ul>
</div>
